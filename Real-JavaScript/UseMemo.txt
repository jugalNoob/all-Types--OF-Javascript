import React, { useState,useMemo } from 'react'
function Memo() {
    const [count , setCount]=useState(0);
    const [item, setIteem]=useState(10)
 const multiMemo=useMemo(function multiCoun(){
    console.log("jkljhsdc")
    return count *5;
},[count])
  return (
    <div>
      {/* useMemo */}
      <h1>{count}</h1>
      <h1>{item}</h1>
      <h1>{multiMemo}</h1>

<button onClick={(e)=>setCount(count+1)}>click</button>
<button onClick={(e)=>setIteem(item*5)}>update</button>
    </div>
  )
}

export default Memo

|||||||||||||||||||||||||
let sum=0
const calc=(n)=>{
    for(let i=0; i<=n; i++){
        sum+=i;
    }
    return sum
}

const memo=(fun)=>{

    let cache={}
    return function(...args){
        let n=args[0];
        if(n in cache){
console.log(cache)
            return cache[n];
        }else{
            console.log("cahe first time")
          let result=  fun(n)
          cache[n]=result
          return result;
        }
    }

}
console.time()
let cal=memo(calc)

console.log(cal(5))

let one=calc(5)
console.log(one)
console.timeEnd()

console.time()
console.log(cal(5))
console.timeEnd()



||||||||||||||||||||||||||

function memoize(func) {
  const cache = {};
  
  return function(...args) {
    const key = JSON.stringify(args);
    
    if (cache[key]) {
      return cache[key];
    }
    
    const result = func.apply(this, args);
    cache[key] = result;
    
    return result;
  };
}

// Function to be memoized
function calculateSum(a, b) {
  console.log("Calculating sum...");
  return a + b;
}

// Memoize the function
const memoizedSum = memoize(calculateSum);

// Call the memoized function
console.log(memoizedSum(5, 3)); // Output: Calculating sum... 8
console.log(memoizedSum(5, 3)); // Output: 8 (result is retrieved from cache)
console.log(memoizedSum(2, 4)); // Output: Calculating sum... 6
console.log(memoizedSum(2, 4)); // Output: 6 (result is retrieved from cache)
